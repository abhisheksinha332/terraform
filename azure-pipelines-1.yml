# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
- group: Terraform-SPN

steps:
- script: ls -R $(System.DefaultWorkingDirectory)
- script: echo $(ARM_CLIENT_ID)
  displayName: 'Run a one-line script'


- task: TerraformInstaller@2
  inputs:
    terraformVersion: 'latest'
- task: TerraformCLI@2
  inputs:
    command: 'init'
    commandOptions: '-var client_id=$(ARM_CLIENT_ID) -var client_secret=$(ARM_CLIENT_SECRET) -var tenant_id=$(ARM_TENANT_ID) -var subscription_id=$(ARM_SUBSCRIPTION_ID)'
    backendType: 'azurerm'
    backendServiceArm: 'Abhishek'
    backendAzureRmTenantId: '$(ARM_TENANT_ID)'
    backendAzureRmSubscriptionId: '$(ARM_SUBSCRIPTION_ID)'
    ensureBackend: true
    backendAzureRmResourceGroupName: 'abhi-rg'
    backendAzureRmResourceGroupLocation: 'Southeast Asia'
    backendAzureRmStorageAccountName: 'terraformstatefile3327za'
    backendAzureRmContainerName: 'terraformstatefile3327zacontainer'
    backendAzureRmKey: 'devplan.tfstate'
    allowTelemetryCollection: true


- task: TerraformCLI@2
  inputs:
    command: 'plan'
    environmentServiceName: 'Abhishek'
    providerAzureRmSubscriptionId: '$(ARM_SUBSCRIPTION_ID)'
    commandOptions: '-var client_id=$(ARM_CLIENT_ID) -var client_secret=$(ARM_CLIENT_SECRET) -var tenant_id=$(ARM_TENANT_ID) -var subscription_id=$(ARM_SUBSCRIPTION_ID)'
    allowTelemetryCollection: true
